#修改版本号强制触发构建
SET(BUILD_VERSION 3)

#设定项目名称
SET(THIS_PROJECT_NAME MyOCR)

#设定QT4环境,参考FindQt4.cmake
FIND_PACKAGE(Qt4 REQUIRED)

#引入需要的Qt库，必须放在QT_USE_FILE之前
SET(QT_USE_QTMAIN TRUE)
SET(QT_USE_QTOPENGL TRUE)
#SET(QT_USE_QTXML TRUE)

#引入Qt必要的设定
INCLUDE(${QT_USE_FILE})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#第三方头文件和库文件目录
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
#LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib)

#设置资源文件夹的位置
SET(RESOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/resources)

#设定源文件
FILE(GLOB CPP_FILES "*.cpp")
FILE(GLOB HEADER_FILES "*.h")

FILE(GLOB SHARED_CPP_FILES "share/*.cpp")
FILE(GLOB SHARED_HEADER_FILES "share/*.h")

FILE(GLOB TWAIN_CPP_FILES "twain/*.c*")
FILE(GLOB TWAIN_HEADER_FILES "twain/*.h")

FILE(GLOB UI_FILES "*.ui")
SET(RC_FILES ${RESOURCE_DIR}/app.rc)
SET(QRC_FILES ${RESOURCE_DIR}/app.qrc)


SET(HEADER_FILES_HAVING_Q_OBJECT)
FOREACH(HEADER ${HEADER_FILES} ${TWAIN_HEADER_FILES})
    FILE(STRINGS "${HEADER}" LINES REGEX "Q_OBJECT")
    IF(LINES)
        LIST(APPEND HEADER_FILES_HAVING_Q_OBJECT "${HEADER}")
    ENDIF()
ENDFOREACH()

#对Qt源文件进行处理
QT4_WRAP_CPP(MOC_FILES ${HEADER_FILES_HAVING_Q_OBJECT} )
QT4_WRAP_UI(UIC_FILES ${UI_FILES})
QT4_ADD_RESOURCES(RES_FILES ${QRC_FILES})

#对生成文件分组
SOURCE_GROUP("Codes" FILES
	${HEADER_FILES}
	${CPP_FILES}
)
SOURCE_GROUP("Share" FILES
	${SHARED_HEADER_FILES}
	${SHARED_CPP_FILES}
)
SOURCE_GROUP("Twain" FILES
	${TWAIN_HEADER_FILES}
	${TWAIN_CPP_FILES}
)
SOURCE_GROUP("Resouces" FILES
	${UI_FILES}
	${RC_FILES}
	${QRC_FILES}
)
SOURCE_GROUP("Generated" FILES
	${MOC_FILES}
	${UIC_FILES}
	${RES_FILES}
)

#目标文件和链接文件
ADD_EXECUTABLE(${THIS_PROJECT_NAME} WIN32 
	${HEADER_FILES} ${CPP_FILES}
	${SHARED_HEADER_FILES} ${SHARED_CPP_FILES}
	${TWAIN_HEADER_FILES} ${TWAIN_CPP_FILES}
	${MOC_FILES} ${UIC_FILES} 
	${RES_FILES} ${RC_FILES})

TARGET_LINK_LIBRARIES(${THIS_PROJECT_NAME} ${QT_LIBRARIES})
TARGET_LINK_LIBRARIES(${THIS_PROJECT_NAME} opengl32)

#链接第三方lib文件
FILE(GLOB LIB_FILES "${PROJECT_SOURCE_DIR}/lib/*.lib")
TARGET_LINK_LIBRARIES(${THIS_PROJECT_NAME} ${LIB_FILES})

#拷贝第三方dll文件到执行目录
FILE(GLOB DLL_FILES  "${PROJECT_SOURCE_DIR}/lib/*.dll")
FOREACH(DLL_FILE ${DLL_FILES})
	add_custom_command(TARGET ${THIS_PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E copy_if_different
		"${DLL_FILE}"
		"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIGURATION>"
	)
ENDFOREACH(DLL_FILE)

#拷贝数据文件文件到执行目录
add_custom_command(TARGET ${THIS_PROJECT_NAME} POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory
	${PROJECT_SOURCE_DIR}/data
	${CMAKE_CURRENT_BINARY_DIR}/$<CONFIGURATION>
)
